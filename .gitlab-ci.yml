# This file is a template, and might need editing before it works on your project.
# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/node/tags/
stages:
  - build

# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-service

# This folder is cached between builds
# http://docs.gitlab.com/ce/ci/yaml/README.html#cache


deploy to production:
  image: ubuntu
  variables:
    IMAGE_TAG: coolya/avr-gcc:latest
    SCW_SERVER_NAME: buildbob
    DOCKER_DRIVER: overlay
    ARCH: amd64
  before_script:
    - apt-get update && apt-get install -y wget
    - wget "https://github.com/scaleway/scaleway-cli/releases/download/v1.14/scw_1.14_${ARCH}.deb" -O /tmp/scw.deb
    - dpkg -i /tmp/scw.deb && rm -f /tmp/scw.deb
#    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - scw login -t $SCW_TOKEN -o $SCW_ACCESS
  stage: build
  script:
    - export SERVER_ID=$(scw create --commercial-type=X64-120GB  --ip-address=dynamic --name="$SCW_SERVER_NAME" docker)
    - scw start $SERVER_ID -w)
    - scw exec $SERVER_ID "cd /tmp && git clone https://git.logv.ws/coolya/avr-gcc.git && cd avr-gcc && git checkout $CI_COMMIT_SHA"
    - scw exec $SERVER_ID "cd /tmp/avr-gcc && docker build -t $IMAGE_TAG ./7.1"
    - scw exec $SERVER_ID "rm -rf /tmp/avr-gcc"
    - scw stop $SERVER_ID -w -t
#    - docker push $IMAGE_TAG
  only:
    - master